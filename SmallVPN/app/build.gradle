apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
//import com.android.build.OutputFile

repositories {
    jcenter()
    maven { url 'https://maven.google.com' }
}

// Enable Crashlytics NDK reporting
//crashlytics {
//    enableNdk true
//}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0-alpha02'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
//    implementation 'com.squareup.okhttp3:okhttp:4.2.1'
//    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'
    implementation 'com.google.firebase:firebase-core:17.2.2'
    implementation 'com.google.firebase:firebase-config:19.1.0'
//    implementation 'com.google.firebase:firebase-analytics:17.2.1'
//    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
//    implementation 'com.crashlytics.sdk.android:crashlytics-ndk:2.1.0'
    implementation 'com.google.android.gms:play-services-ads-lite:18.3.0'
    implementation 'com.scottyab:secure-preferences-lib:0.1.7'
    implementation 'eu.chainfire:libsuperuser:1.1.0.+'
    implementation 'com.jrummyapps:android-shell:1.0.1'
	implementation project(":tun2socks")
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'
    defaultConfig {
        applicationId "com.underproject.smallvpn"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 400007
        versionName "1.0.2"
//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        resConfigs "en"

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_STL=c++_static'
                //abiFilters "arm64-v8a"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'build/ovpnassets']
        }
    }

    buildTypes {
        release {
            minifyEnabled true   // Obfuscate and minify codes
            shrinkResources true // Remove unused resources
            useProguard true     // Remove unused codes
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "implementation"

    productFlavors {
        normal {
            dimension "implementation"
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
// Golang Not support MIPS devices
    bundle {
        density {
            enableSplit true
        }
        language {
            enableSplit true
        }
        abi {
            enableSplit true
        }
    }

//    splits {
//        // Configures multiple APKs based on ABI.
//        abi {
//            // true for mode release
//            def isReleaseBuild = true
//
//            gradle.startParameter.taskNames.find {
//                // Enable split for release builds in different build flavors
//                // (assemblePaidRelease, assembleFreeRelease, etc.).
//                if (it ==~ /:app:assemble.*Release/) {
//                    isReleaseBuild = true
//                    return true // break
//                }
//
//                return false // continue
//            }
//
//            // Enables building multiple APKs per ABI.
//            enable isReleaseBuild
//
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for x86, armeabi-v7a, and mips.
//            reset()
//
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
//
//            // Specifies that we want to also generate a universal APK that includes all ABIs.
//            universalApk true
//        }
//    }
//
//    // Map for the version code that gives each ABI a value.
//    def abiCodes = ['x86':1, 'x86_64':2, 'armeabi-v7a':3, 'arm64-v8a':4]
//
//    // APKs for the same app that all have the same version information.
//    android.applicationVariants.all { variant ->
//        // Assigns a different version code for each output APK.
//        variant.outputs.each {
//            output ->
//                def abiName = output.getFilter(OutputFile.ABI)
//                output.versionCodeOverride = abiCodes.get(abiName, 0) * 100000 + variant.versionCode
//        }
//    }
}

// Ensure native build is run before assets, so assets are ready to be merged into the apk
android.applicationVariants.all { variant ->
    variant.mergeAssetsProvider.get().dependsOn(variant.externalNativeBuildProviders)
//    variant.mergeAssets.dependsOn(variant.externalNativeBuildTasks)
}